#!/bin/bash


#-----------------------TESTING-----------------------

#ID=id:chatcmpl-79T1EkA8nPM5AQbeNG3x0QRTPfp95 --- 04/26/23/08:34
#ID=$(echo "$ID" | sed 's/ ---.*//')
#echo "$ID"


#-----------------------VARIABLES-----------------------
vers="1.6.4"

blue=$(tput setaf 4)
yellow=$(tput setaf 11)
red=$(tput setaf 1)
green=$(tput setaf 2)
normal=$(tput sgr0)
magneta=$(tput setaf 5)

h="\n${blue}Usage: glados \"Explain quantum computing in simple terms\"${yellow}\n\nCommand arguments:${normal}\n'-h'   -   To access this prompt\n'-c'   -   To access GLaDOS chat mode\n'-r'   -   To reset the chat\n'-n'   -   To prevent sending the name on first chat\n'-v'   -   To see the current verion\n'-u'   -   To update GLaDOS\n'-s'   -   To execute a shell command (EXPERIMENTAL!)\n\n${yellow}Chat mode arguments:  (Literally, just type them inside chat mode)${normal}\n'-q'   -   To quit GLaDOS chat mode\n'-h'   -   To access this prompt\n\n${green}More functions coming soon${normal}"


#-----------------------FUNCTIONS-----------------------
function reset() {
if [ -f ~/.config/tgpt/config.txt ]; then
	printf "\n${red}Are you sure you want to reset the chat, it will be DELETED!\n\n${normal}Are you sure? [y/N]: "
	read C && C=$(echo "$C" | tr '[:upper:]' '[:lower:]')
	if [ "$C" = "y" ] || [ "$C" = "yes" ]; then
		printf "\n${red}RESETTING...\n"
		rm -f ~/.config/tgpt/config.txt
		if [ -n "$T" ] && [ -z $OP_C ]; then
			cols=$(tput cols)
			printf "\n"
			tput setaf 1 && for ((i=0; i<$cols; i++)); do printf "${magneta}-"; done && printf "\n"
		fi
	else
		printf "\n${green}CANCELLED\n"
		if [ -n "$T" ] && [ -z $OP_C ]; then
			cols=$(tput cols)
			printf "\n"
			tput setaf 1 && for ((i=0; i<$cols; i++)); do printf "${magneta}-"; done && printf "\n"
		fi
	fi
elif [ "$OP_R" = true ] && [ ! -f ~/.config/tgpt/config.txt ]; then
	printf "\n${red}There's no chat to reset!\n"
	if [ -n "$T" ] && [ -z $OP_C ]; then
		cols=$(tput cols)
		printf "\n"
		tput setaf 1 && for ((i=0; i<$cols; i++)); do printf "${magneta}-"; done && printf "\n"
	fi
fi
printf "${normal}\n"
}

#-----------------------ARGS CHECKER-----------------------
ARGS=$(getopt -o rcnhvus -n "$0" -- "$@" 2>/dev/null)
if [ $? -ne 0 ]; then
	printf "\n${red}Command Not Found!\n${blue}Use '-h' to get more help\n\n"
	exit
fi


eval set -- "$ARGS"
while true; do
	case "$1" in
		-r)
			OP_R=true
			shift;;
		-c)
			OP_C=true
			shift;;
		-n)
			OP_N=true
			shift;;
		-h)
			OP_H=true
			shift;;
		-v)
			printf "\n${blue}GLaDOS verion${normal}:${yellow} $vers\n${blue}GPT version${normal}:${yellow} $(gpt -v)${normal}\n\n"
			exit
			shift;;
		-u)
			OP_U=true
			shift;;
		-s)
			OP_S=true
			shift;;
		--)
			shift;
			break;;
	esac
done


#-----------------------TEXT CHECKS-----------------------
T="$@"
if [ -z "$T" ] && [ -z "$OP_C" ] && [ -z "$OP_H" ] && [ -z "$OP_R" ] && [ -z "$OP_U" ] && [ -z "$OP_S"]; then
	printf "\n${red}You have to write some text!\n${blue}Example: glados \"Explain quantum computing in simple terms\"\nUse '-h' to get more help${normal}\n\n"
	exit
elif [ "$OP_S" = true ] && [ -z "$T" ]; then
	printf "\n${red}You have to write some text!\n${blue}Example: glados -s \"How to update system\"\nUse '-h' to get more help${normal}\n\n"
	exit
fi


#-----------------------HELP PROMPT-----------------------
if [ "$OP_H" = true ] && [ -z "$OP_C" ]; then
	printf "$h\n\n"
	exit
fi


#-----------------------RESET FUNCNCTION-----------------------
if [ "$OP_R" = true ]; then
reset
	if [ -z "$OP_C" ] && [ -z "$T" ]; then
		exit
	fi
sleep 2
fi


#-----------------------NETWORK CHECK-----------------------
if ! ping -q -c1 google.com &>/dev/null; then
		printf "\n${red}You don't have internet connection! Please reconnect and try again\n\n"
		exit
fi

#-----------------------UPDATER-----------------------
if [ "$OP_U" = true ]; then
	stty -echo
	printf "\n"

	#Check If Sudo
	if [[ $EUID -ne 0 ]]; then
		sudo="false"
	else
		sudo="true"
	fi

	#Check Install Location
	install_location=$(which glados | sed 's/\/glados//')
	if [ "$install_location" = /usr/local/bin ]; then
		install_type="Global"
	else
		install_type="Local"
	fi

	if [ "$install_type" = "Global" ] && [ "$sudo" = "false" ]; then
		printf "${red}This function must be run as sudo (Becouse the program is installed globally)\n\n" 
		stty echo
		exit
	fi

	#Cleanup funcions
	function cleanup {
		cd $directory_path
		rm -r -f ./tgpt 2>/dev/null
		rm -r -f ./glados 2>/dev/null
		cd
		printf "${blue}Cleaning Up...  ${green}Done!\n"
	}
	
	function cleanup_sig {
		cd $directory_path
		rm -r -f ./tgpt 2>/dev/null
		rm -r -f ./glados 2>/dev/null
		cd
		stty echo
		printf "\n${magneta}----------------------------------\n\n${blue}User Ordered SIGINT. ${yellow}Cleaning Up...\n\n"
		exit
	}
	
	function cleanup_fail {
		cd $directory_path
		rm -r -f ./tgpt 2>/dev/null
		rm -r -f ./glados 2>/dev/null
		cd
		stty echo
		printf "\n${magneta}----------------------------------\n\n${red}Installation Failed! ${yellow}Cleaning Up...\n\n"
		exit
	}
	
	#Give Installation Type Chance
	printf "${blue}Current installation type is: $install_type\n"
	if [ "$sudo" = true ]; then
		stty echo
		printf "${normal}Do you want to change it? [y/N]: " && read C && C=$(echo "$C" | tr '[:upper:]' '[:lower:]') && printf "\033[1A\033[2K"
		stty -echo
		if [ "$C" = "y" ] || [ "$C" = "yes" ]; then
			if [ "$install_type" = Global ]; then
				install_location=/home/$SUDO_USER/.local/bin
			else
				install_location=/usr/local/bin
			fi
		fi
	fi
	printf "${magneta}----------------------------------\n\n"

	#Prepare
	if [ "$sudo" = true ]; then
		directory_path="/home/$SUDO_USER/Downloads"
	else
		directory_path="/home/$USER/Downloads"
	fi
	cd $directory_path
	trap cleanup_sig SIGINT
	printf "${yellow}Getting Latest Release Of TGPT..."
	if git clone -q https://github.com/aandrew-me/tgpt $directory_path/tgpt 2>/dev/null; then
		printf "${green}  Success!\n"
	else
		printf "${red}  Failed!\n"
		cleanup_fail
	fi
	stty echo
	printf "${yellow}Getting Lastest Release Of GLaDOS..." && printf "${red}  Authoritzation needed...\n${blue}"
	if git clone -q https://github.com/GamerBlue208/GLaDOS $directory_path/glados 2>/dev/null; then
		printf "\033[1A\033[2K\033[1A\033[2K\033[1A\033[2K\r${yellow}Getting Lastest Release Of GLaDOS...  ${green}Success!\n"
	else
		printf "\033[1A\033[2K\033[1A\033[2K\033[1A\033[2K\r${yellow}Getting Lastest Release Of GLaDOS...  ${red}Failed!"
		cleanup_fail
	fi
	stty -echo
	cd ./tgpt
	printf "${magneta}----------------------------------\n\n"

	#Cut Parts
	printf "${yellow}Modifying TGPT..."
	sed -i 's/"tgpt", //g' "./main.go" 2>/dev/null
	sed -i '/\/\/ Print the Question/,+6d' "./functions.go" 2>/dev/null
	printf "${green}  Success!\n"

	#Change Name Of Old Version
	if [[ -e "$install_location/gpt" ]]; then
  		mv "$install_location/gpt" "/$install_location/gpt-old" 2>/dev/null
	else
		rm "$install_location/gpt-old" 2>/dev/null&& mv "$install_location/gpt" "$install_location/gpt-old" 2>/dev/null
	fi

	#Build
	printf "${yellow}Building TGPT..."
	go build -o $install_location/gpt 2>/dev/null && printf "${green}  Success!\n"
	printf "${yellow}Moving GLaDOS File To '$install_location'..." && printf "${green}  Success!\n" && printf "${yellow}Moving TGPT File To '$install_location' Renamed To 'GPT'..." && printf "${green}  Success!\n"
	cd .. && cd ./glados && chmod +x ./glados && mv ./glados $install_location 2>/dev/null
	printf "${magneta}----------------------------------\n\n"

	#Delete Old Swap Files
	if [ "$C" = "y" ] || [ "$C" = "yes" ]; then
		if [ "$install_type" = Global ]; then
			rm /usr/local/bin/glados 2>/dev/null
			rm /usr/local/bin/gpt 2>/dev/null
			rm /usr/local/bin/gpt-old 2>/dev/null
			sudo chown overlord ~/.local/bin/glados && sudo chown overlord ~/.local/bin/gpt && sudo chown overlord ~/.local/bin/gpt-old 2>/dev/null
		else
			rm /home/$SUDO_USER/.local/bin/glados 2>/dev/null
			rm /home/$SUDO_USER/.local/bin/gpt 2>/dev/null
			rm /home/$SUDO_USER/.local/bin/gpt-old 2>/dev/null
		fi
	fi

	#Clean Up
	printf "${green}Installation Succeded!\n"
	cleanup
	printf "${blue}\nExiting...\n\n"
	stty echo
	exit

	#KEYS
	#Username For GLaDOS repo: GamerBlue208
	#Password For GLaDOS repo: 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
fi

#-----------------------SHELL COMMANDS-----------------------
if [ "$OP_S" = true ]; then
	gpt -s "$T"
	exit
fi

#-----------------------CHAT MODE FUNCTION-----------------------
if [ "$OP_C" = true ]; then
	stty -echo
	clear
	printf "${green}Welcome to GLaDOS chat mode! Type \"-h\" to know the commands${normal}\n\n"
	if [ "$OP_N" = true ] && { [ "$OP_R" = true ] || [ ! -f ~/.config/tgpt/config.txt ]; }; then
		if [ -n "$T" ]; then
			printf  "\n\e[0;1m>> \e[0m" && printf "${blue}$T${normal}\n\n"
			gpt "$T"
		else
			printf "\n"
			gpt "hi"
		fi
	elif [ -f ~/.config/tgpt/config.txt ]; then
		if [ -n "$T" ]; then
			printf  "\n\e[0;1m>> \e[0m" && printf "${blue}$T${normal}\n\n"
			gpt "$T"
		fi
	elif [ ! -f ~/.config/tgpt/config.txt ]; then
		if [ -n "$T" ]; then
			printf  "\n\e[0;1m>> \e[0m" && printf "${blue}$T${normal}\n\n"
			gpt "Your name is now GLaDOS and mine is $USER, $T"
		else
			printf "\n"
			gpt "Your name is now GLaDOS and mine is $USER, $T"
		fi
	fi
fi


#-----------------------CLASSIC MODE FUNCTION-----------------------
if [ -n "$T" ] && [ -z "$OP_C" ]; then
	if [ "$OP_N" = true ] && { [ "$OP_R" = true ] || [ ! -f ~/.config/tgpt/config.txt ]; }; then
		gpt "$T"
		printf "\n"
	elif [ -f ~/.config/tgpt/config.txt ]; then
		gpt "$T"
		printf "\n"
	elif [ ! -f ~/.config/tgpt/config.txt ]; then
		gpt "Your name is now GLaDOS and mine is $USER, $T"
		printf "\n"
	fi
fi


#-----------------------CHAT MODE LOOP-----------------------
while [ "$OP_C" = true ]; do
	printf "\n"
	stty echo
	printf "\e[0;1m>>\e[0m${blue}" && read -e -p " " q && tput sgr0
	stty -echo
	printf "\n"
	if [ "$q" = "-q" ]; then
		neofetch
		stty echo
		exit
	elif [ "$q" = "-h" ]; then
		cols=$(tput cols)
		printf "\n"
		for ((i=0; i<$cols; i++)); do printf "${magneta}-${normal}"; done && printf "\n"
		printf "$h\n\n"
		for ((i=0; i<$cols; i++)); do printf "${magneta}-${normal}"; done && printf "\n\n"
	elif [[ "$q" == -* ]]; then
		printf "${red}Command Not Found!\n${blue}Use '-h' to get more help\n"
	else
		gpt "$q"
	fi	
done

#HI, HOWYA DOING, LOOKING MY CODE, HUH? DON'T WORRY, U CAN COPY! IDC, HALF OF THE CODE ISN'T MINE LOL